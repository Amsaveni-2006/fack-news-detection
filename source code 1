import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
import nltk
import string

# Optional: download stopwords
# Removed download call as it should only be run once
# nltk.download('stopwords')
from nltk.corpus import stopwords

# Load your dataset
# Example assumes 'text' and 'label' columns
df = pd.read_csv('data set - Sheet1.csv')  # Replace with your dataset path

# Preprocessing
def clean_text(text):
    # Ensure the input is a string before processing
    if not isinstance(text, str):
        return "" # Or handle non-string data appropriately

    text = text.lower()
    text = ''.join([ch for ch in text if ch not in string.punctuation])
    words = text.split()
    stop_words = set(stopwords.words('english'))
    return ' '.join([word for word in words if word not in stop_words])

# Apply the cleaning function to the 'Statement' column instead of 'text'
df['Statement'] = df['Statement'].apply(clean_text)

# Features and Labels
# Use 'Statement' as the feature column
X = df['Statement']
y = df['Label'] # Assuming 'Label' is the correct label column name

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# TF-IDF Vectorization
vectorizer = TfidfVectorizer(max_df=0.7)
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

# Model training
model = LogisticRegression()
model.fit(X_train_tfidf, y_train)

# Prediction and Evaluation
y_pred = model.predict(X_test_tfidf)

print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
